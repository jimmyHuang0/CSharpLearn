新技术：
	IOC,AOP,MVC

协变、逆变的加深理解

AOP:
	使用特性实现缓存、日志、权限等切面信息。这是从框架的角度进行系统性的使用。


Delegate类没有invoke方法，该方法是从哪里继承过来的？？？

链接：Join  ???左链接???右链接

yield???


///这里应该new Type[] { }), new Expression[0]，是什么意思，进一步学习反射来确认，GetMethod的应用
MethodCallExpression method = Expression.Call(member, typeof(Int32).GetMethod("ToString", new Type[] { }), new Expression[0]);
MethodCallExpression methodEquals = Expression.Call(method, typeof(string).GetMethod("Equals", new Type[] { typeof(string) }), new Expression[]
{
   Expression.Constant("5", typeof(string))
});

DTO??? 

automapper

变量后加'?'

多线程设计模式

IQueryable

事件的定义与参数传递

多线程的对象分配与执行原理
----------------------------------------------------- doing --------------------------------------------------------------
24 1：03：14
----------------------------------------------------- doing --------------------------------------------------------------

Cache:
	--业务情况：数据不变的(读/写)情况
	--MemeryCache：
		--类内部有一个，静态的本类，作为成员变量
		--包含一个静态字典

----------------------------------------------------- done --------------------------------------------------------------

Linq:




sealed:
	应用于某个类时，sealed修饰符可阻止其他类继承自该类。

Task与async混合：
	--task.wait会导致阻塞
	--await和wait混用死锁
		--用async，在进行await的时候，会有一个上下文切换。如果在控制台程序，切换回使用线程池。而在GUI程序，切换会使用GUI线程。如果，某Task使用await，而另外的一个地方使用此task的wait方法。将导致死锁。原因，就是使用task.wait()会获取GUI线程的上下文，而await结束后，会查询此上下文。而GUI线程，只允许一个程序块(还是线程？)进入获取上下文。从而导致死锁。
		--解决方法，在await方法加入ConfigureAwait(false)，false表示请外从线程池获取上下文，如果是true就是根据原来的上下文去获取。如：
		await Task.Delay(4500).ConfigureAwait(false)



获取带毫秒数的系统时间：
	DateTime.Now.TimeOfDay.ToString()


DB数据库设计二：
	--权限设计
		--角色
			--用来批量提供权限
		--菜单控制权限
		--数据访问权限
	--业务逻辑：
		--一个用户可能有多个角色
		--每个角色对应一种权限，而权限也就是对应一个类型的菜单
		--有些用户有特殊的菜单权限
		--数据表三个：用户、角色、菜单
		--三种映射：用户<->角色、用户<->菜单、菜单<->角色
	--项目应该有超级权限，可以无视所有权限限制
	--数据权限：控制行权限，一般给用户一个path，所有数据都有path字段
	--数据库保存树(菜单表)：
		--code: 一个ID，或者异于同级类的名字
		--使用ParentID,没有first ChildID
		--Level，表示第几级，就是父level+1
		--Order/Sort：同级排序
		--Path字段：父类Path+自己的code
			--用来查找某节点及其所有子节点。
			--查询到就可以统一删除或者同级显示
			--这可以通过数据库，重头到尾查找一次，就可以查完
	--订单表设计(主从表)
		--主表：保存可以统一的信息。如用户名、总金额等
		--从表：保存不能统一的信息。如某个商品的信息
	--用户相互关注问题
		--基本业务操作
			--A关注B
			--B关注A
			--A的关注列表
			--A的互粉列表
			--取消关注
		--基本关注类型：
			--A关注B
			--B关注A
			--AB相互关注
		--数据库构建：
			--字段设计 方式一：ID 关注发起ID 被关注ID
	--负载均衡
		--二八原则：80%查询、20%写入
		--增加查询的能力，写入是一样的
	--读写分离
		--数据库 本身有发布订阅同步数据功能
		--发布订阅同步数据功能的原理：
			--主数据库写数据时，需要检查SQL、编译SQL，然后执行、执行失败还需要进行回退，
				然后写入日志
			--从数据库被更新时，根据日志，省略一系列的检查，直接操作，
				因此数据会快一些
			--限制：查询有延时，不能保证数据完全一致
				--这个该怎么规避？？？
			--写操作：
				--把数据写入主数据库
				--从数据库会根据订阅自动更新内部内容
			--读操作：
				--从从数据库进行读操作
				--可以有多个从数据库
				--这样就可以做到读扩展
	--分库分表
		--分库：
			--垂直拆分
				--根据写业务的不同，主数据库分为多个，就可以部署到不同的数据库

			--水平分库	
				--
		--分表
			--垂直分表
				--两个表直线的关系一一对应，主表包含主要信息，从表包含详细信息
				--查询时，查询主表，根据主表的键再获取从表的信息
			--水平分表
				--每个表的结构一样
				--可以按时间分表
				--也可以随机均匀分配
		--jion查询：
			--通过服务来实现
			--如果中途失败，重试；重试不成功，则回退
		--表分区
			--sqlserver支持的一个分表，把一个物理文件分为多个文件


DB数据库设计一：
	--工具PowerDesigner
	--可视化数据库设计
	--User是数据库关键字
	--三大范式：
		--每一列保持原子性(不可分割)
			--反例：地址信息：省市区，应该分为三列
		--每一列与主键间接相关
			--一张表只应该描述一个对象
		--每一列都跟主键直接相关
			--有可能违背本范式，可以提高查询速度，但是增加了修改的操作
			--违背可以避免一定的join查询
	--三种关系：
		--一对一
			--如一个用户对应其详细信息表
			--相同主键/外键
		--一对多
			--如一个公司对应多个员工
			--使用外键/主键进行对应关系
		--多对多
			--如角色与用户，管理员(角色)可能有多个用户，一个用户也可能有多个角色
			--使用中间表(Mapping)来实现：放了两边对应关系的键
	--join：用来查询关键字查询另一个表的信息
	--自增ID：
		--数据库自动增加，sqlserver默认聚集索引
		--空间小
		--可以进行分区，方便业务查询
		--在多库环境有可能会ID冲突
	--GUID：
		--GUID程序生成，全球唯一
		--防呆join错误
		--可以通过创建时间来聚集
	--自增ID做键值
	--GUID做键值
	--外键
		--级联删除
		--插入需要做检查
	--主键
		--表的唯一标识
	--数据库事务
		--多条sql作为一个整体，要么全部执行完成，要么全部取消。
		--是原子性操作
	--存储过程
		--在数据内部的逻辑过程
		--减少数据传输
		--但是存储过程不好维护，逻辑分散到存储过程
		--预先编译提升性能
	--触发器
		--也是一种存储过程
	--游标
	--视图
		--用来查询，不能写入
		--多表拼接为临时表，供查询
		--可以做权限控制，限制有些字段不被查看到
	--函数
		--内置函数
		--自定义函数
	--字段类型
	--字段可空
		--值类型字段一般给默认值
		--如一些时间，一般可空
	--统计字段
		--如state，创建时间、创建人、最后更新时间、最后更新人、修改时间、修改用户等等
	--映射表
	--软删除
		--
	--一般数据库逻辑以及业务逻辑，都集中到一个地方维护


is/as 关键字：
	我们在实际编码中有时会用到as关键字来将对象转换为指定类型，与is类型不同的是，
	is关键字是用于检查对象是否与给定类型兼容，如果兼容就返回true，
	如果不兼容就返回false。而as关键字会直接进行类型转换，
	如果转换成功会返回转换后的对象，如果转换不成功则不会抛出异常而是返回null。


CLR:common language runtime
	--线程堆栈
		--栈 stack：
			--栈的速度比堆快，因为在堆上需要通过栈在找到堆
			--定义的对象的指针在栈上
		--堆 heap：
			--对象指针指向的实际内容在堆上
		--类在堆栈的位置
			--类中的方法中的局部变量在栈上，因为方法的局部变量不依托于某个实例的类
			--类中的属性在堆上，因为属性依托于某个new的对象
		--结构在栈上
		--值类型
			--作为局部变量在栈上
			--作为字段在堆上

struct:
	--结构隐式继承System.ValueType
	--在结构中，不能有父类


CTS: common types System
	--命名规范

CLS:
	--.net中各种语言共同的部分

垃圾回收：
	--栈不需要GC，栈的内存随作用域的离开而消亡
	--手动GC：GC.Collect()
	--GC根据对象图(对象的引用图形)回收对象
	--对象会有一个对象数组来保存对象指针，不是用链表
	--对于非托管资源(如一个文本、一个数据库连接、socket、系统创建的资源，或者一些外部资源，只要是不是程序内存创建)需要在写析构函数，或者自动释放函数Dispose(也就是继承IDisposable接口)，在对象释放的时候，同时释放非托管资源
	--垃圾清理的时候，锁定所有线程，都不能工作
	--垃圾回收的策略：
		--对象会有一个属性，标识被垃圾回收检查的次数。没有被检查过，为第0代，检查一次为第1代，以此类推
		--GC先检查代数小的对象进行回收，如果内存不够，再检查下一代。
		--检查到的如果可以回收则销毁，如果不能回收则增加代数
		--但是，最多只有0、1、2三代，即时都被检查多次，依然是第2代
	--使用using，主动调用Dispose方法
	--标准Dispose接口实现：
		--对象有一个_disposed标志，调用Dispose方法被置位为true
		--每一个public的方法，调用前都需要做_disposed判断，为true，直接返回并报错误或者异常


内存分配：堆栈
	--堆
		--根据栈中对象
	--栈
		--在栈中分配的内存，是先进后出
		--根据大括号来进行内存回收


string:
	--在C#中使用享元模式进行存储
	--首先，我们使用字符串的时候，只会使用它的值，并不关心它有对象容器，或者说包含这个值的类。因此，如果值一样，我们就可以使用相同的对象，这样就不用分配多个内存。值不一样的时候，就会创建一个新的对象。
	--而外部使用，是不能使用无参数构造函数。string关键字和"="，的功能是由CRL帮我们做了一部分工作。
	--每一个String对象，都会有一个不同的Hash码，用于确认是否有此对象，是否需要创建新的对象。


窗口编程：
	--AutoScroll可设置自动滚条
	--layout布局的几个容器：FlowLayoutPanel、Panel等



并发集合：
	--并行容器：
		ConcurrentQueue
		ConcurrentStack
		ConcurrentBag ： 一个无序的数据结构集，当不需要考虑顺序时非常有用。
		BlockingCollection ： 与经典的阻塞队列数据结构类似
		ConcurrentDictionary
	--这些集合在某种程度上使用了无锁技术(CAS Compare-and-Swap和内存屏障 Memory Barrier)，与加互斥锁相比获得了性能的提升。
		但在串行程序中，最好不用这些集合，它们必然会影响性能。
	--List：线程不安全。
		可能出现异常：目标数组的长度不够。请检查 destIndex 和长度以及数组的下限。 


POP面向过程：
	--


OOP面向对象：
	--面向对象相对静态、封闭，需求的更改容易引起内部的编程变化
	--GOF（Gang of Four） 23种设计模式：解决类与类之间的交互稳定
		--创建型设计模式：三大工厂，把对象创建交给第三方，调用方变得稳定
		--结构型设计模式：类与类之间的关系，用组合代替继承
		--行为型设计模式：对象和行为的分离
	--类自身的变化，增加功能需求，解决不了


AOP面向切面编程：
	--允许通过外部方式修改对象，可以在不修改类内部，增加功能
	--一般只增加通用逻辑，不增加核心业务逻辑，如：日志、校验、缓存、异常、事务、权限
	--实现方式：
		--静态代理
			--代理模式、装饰器模式（包一层）
		--动态代理
			--特性和反射
			--远程代理：
				--.net框架支持
				--RealProxy
				--必须父类MarshalByRefObject，C#中只能继承一个父类
			--Castle.Core 远程代理
				--一个第三方库
				--业务逻辑要使用virtual关键字
				--使用emit实现的
			--Unity
				--可以通过在接口上增加属性，实现接口中所有方法的AOP
					e.g:
						IUnityContainer container = new UnityContainer();//声明一个容器
		                container.RegisterType<IUserProcessor, UserProcessor>();//声明UnityContainer并注册IUserProcessor
		                container.AddNewExtension<Interception>().Configure<Interception>()
		                    .SetInterceptorFor<IUserProcessor>(new InterfaceInterceptor());

		                IUserProcessor userprocessor = container.Resolve<IUserProcessor>();
		                Console.WriteLine("********************");
		                userprocessor.RegUser(user);//调用
		                userprocessor.GetUser(user);//调用
				--TransparentProxyInterceptor：直接在类的方法上进行标记，但是这个类必须继承MarshalByRefObject...不建议用
         		--VirtualMethod：直接在类的方法上进行标记，但这个方法必须是虚方法（就是方法要带virtual关键字）
         		--InterfaceInterceptor：在接口的方法上进行标记，这样继承这个接口的类里实现这个接口方法的方法就能被拦截
		--静态注入
		--MVC：反射+统一入口


12306与分布式异步队列：
	--业务逻辑：
		--库存：指一个地方到另一个地方的票
		--买票/退票/查票：一张票影响到其他多个库存
	--爆发式访问
		--票不够
	--全民黑客
		--刷票，访问量N倍增加
	--负载均衡、数据集群、读写分离、缓存与清除
	--实现功能->优化性能->考虑拓展	
	

基本架构设计原则：
	--DID原则：
		--Design：10倍体量设计
		--Implement：3倍体量实现
		--Deploy：1.5倍体量部署
	--简单接口
	--CAP原则：
		--consistency：一致性
		--availability：可用性
		--partition tolerance：分区容错性
	--API分类：
		--Open API 需要encode授权，定制授权码
		--Admin API 需要IP授权
		--web API 需要SSO认证、Auth认证
		--Mobile API 需要Appkey授权
		--Base API 内部调用，SLA度量（service level agreement）
			--99%简单业务接口响应时间<30ms
			--99%的复杂业务接口响应时间<100ms
			--可用性99.99%
			--集群最大处理能力：xxx每秒
	--熔断机制
	--调用顺序：基础服务<-通用服务<-业务接口
		--调用链可视化：AOP埋点、远程log
	--数据存储
		--关系型数据库：MySQL
		--实时数据库：Hbase
		--数据源路由
		--log
		--复杂查询：缓存->ActiveMQ、Redis
	--数据热点及扩容方案
		--避免产生数据热点：集中访问
		--统一的Rowkey生成机制
			实时数据按年分库，按Rowkey（ID）取模分区
			业务树按Rowkey（ID）取模
	--基础服务：
		--manage：设备管理、企业管理
		--passport：用户管理、SSO认证、权限认证、个性配置
		--resource：资源管理、文件上传、文件下载、资源预览
		--anal：数据统计、任务调度
		--charts：数据导出、导出文档、导出图片、可视化
	--jenkins：持续集成
	--




实现层与抽象层：
	--一般都成对出现


类与类之间的关系：
	--纵向关系：继承 与 接口
	--横向关系：聚合>组合>关联 
				>依赖(方法里面定义的类)


迪米特法则 LOD--Law of Demeter：
	--一个对象应该对其他对象保持最少了解
	--只与直接的朋友通信
	--	高内聚：
		低耦合：
	--


单一原则 SRP：
	--一个函数或者类，只实现一种功能。
	--函数和类的功能和实现需要稳定
	--使用成本增加
	--如何做封装


里式替换原则 LSP：
	--任何使用基类的地方，都可以透明的使用其子类
	--子类拥有父类的所有属性和行为，任何父类出现的地方，都可以使用子类
	--子类继承父类的方法
		--继承为了减少重复代码，不要隐藏
		--继承为了多态，就使用抽象方法或者虚方法
	--父类有，子类不一定有，不要继承。可以使用包含


继承：
	--子类在构造时，都会先调用父类的构造函数。如果父类没有无参构造函数，
		在子类的构造函数里将需要用到base关键字
	--parentClass c=new childClass().  
		普通方法调用父类的方法!!!
		虚方法调用子类的方法!!!
		抽象方法调用子类的方法!!!
	--子类可以用new类修饰方法，说明一下覆盖了父类的方法


dynamic：
	--编译的时候不进行类型检查，运行的时候通过委托调用方法或者类型
	--运行时类型



迭代器：
	--迭代器返回一个IIterator，里面包含三个成员：current、moveNext、Reset
	--foreach调用的时候，是返回一个迭代器。相当于while循环家moveNext，退出的时候reset
	--统一了不同集合的同样的访问方式
	--只要实现 IEumerator GerEnumrator()方法，就可以使用foreach
	--yield延时加载，按需获取，可以避免一次获取全部结果


Emit 和 CodeDOM
	--Emit可以生成即时执行、即时保存的二进制文件机器码
	--CodeDOM可以生成人能读懂的源代码


表达式目录树：
	--任何语句都是表达式，都可以使用表达式目录树合成
	--基类：CodeExpression
	--基础类型：
		-创建实例：new、delegate、array
		-引用：this、base、函数调用
		-操作符：
		-

数据结构接口：
	--IEnumerable：可以迭代访问，linq的基础，用yield，延迟查询
	--IList: 可以索引访问
	--ICollection：表示是一个集合
	--IQueryable：可生成表达式树


数据结构：
	arrayList:
		--可以保存不同类型的队列
		--这里会进行装箱，把所有类型都变味object进行保存
	List:
		--是一个数组
		--连续内存
		--查询速度快，可通过下标索引
		--内存不够的时候，增加可能需要移动一块内存，这里会耗时
	LinkedList：
		--链表
		--插入删除效率高
	Queue:
		--队列，也是一个链表		
	Stack：
		--栈
	Dictionary：
		--泛型的hashtable
		--线程安全的用：concurrentDictionary
		--空间换时间


winform控件刷新：
	--winform的控制都是集成control类，都是线程不安全的，必须绑定某个线程。
	--数据刷新：
		如果在实例控件的线程中创建子线程来刷新控件的数据，需要使用控件的invoke方式。
		使用委托来调用。

await/async:
	--await/async 成对出现
	--返回值都是Task
	--Task可以有其他返回值
	--语法糖
	--只能await Task
	--await之后的代码相当于Task的回调函数，编译器帮忙做了这个东西


lock：
	--相当于Monitor.Enter（）
	--可以实现去掉多线程
	--查看某个引用类型的对象是否被引用，如果被引用，则等待，否则引用该对象
	--不要使用字符串当锁，因为字符串在C#里是通过享元模式实例的，相同的字符串都指向同一个内存对象
	--也不要lock(this)，外部使用的时候也会被锁定
	--可以随便定义一个object来当锁
	--如果每个实例想单独锁定，可以定义一个private object
	--推荐使用方式：
		private static readonly object btnThreadCore_Click_Lock=new object();




闭包：
	--首先，在C#里，类里面是可以定义类的
	--闭包的描述就是，函数内部可以使用其外部上下文相关的变量
	--C#的原子对象是类，也就是类里面的内部成员可以相互访问
	--闭包实质是为使用闭包的函数以及关联的变量，建了一个匿名类。把关联变量定义到匿名类中，而闭包函数则是匿名类中的一个成员函数。
		因此，成员函数就可以访问匿名类中的成员变量。
	--查看 “C#与闭包.docx” “反编译的代码.txt”



多线程取消：
	--CancellationTokenSource，可以在cancel后，取消还没有启动的线程，但是已经启动的，需要内部检查
	--线程不能由别人来取消，只能自己结束自己
	--用CancellationTokenSource，任务取消可以被waitall获取异常


多线程异常：
	--多线程的异常是不会被父线程或者程序捕捉到，这可能会引起一个很大的坑
	--如果父线程需要捕获子线程，可以使用waitall，并且子线程使用tasklist来启动。捕获到的异常是AggregateException
		catch (AggregateException aex)
            {
                foreach (var item in aex.InnerExceptions)
                {
                    Console.WriteLine(item.Message);
                }
            }
	--通常的做法是，在子线程里自己捕获异常并进行处理



Parallel：
	--相当于TaskFactory+waitAll，但是主线程也参与其中一个线程
	--API：invoke,for，foreach，
	--Parallel.invoke:同时并行触发
	--



Task：
	--多线程的启用	
		--thread使用多线程，可以invoke/abort/suspend
		--threadpool基本没有暂停和杀死，建议使用回调
		--Task: 使用TaskFactory，StartNew
	--使用线程池的线程，都是后台线程
	--多线程的使用场景
		--多个启动，快点运算
		--不卡界面，后台计算
		--需要多线程加快速度，同时需要全部完成后，才能继续。
			用waitall,waitAny卡界面
			用ContinueWhenAll,ContinueWhenAny，不卡界面



委托：
	简介：
		委托的本质就是一个函数指针类型。
		函数通过指向不同函数，通过invoke来同步调用被指向的函数。
		通过BeginInvoke来进行异步调用。
	闭包域参数使用：
		在委托里，如果使用lambda函数作为调用函数，
		在lambda函数里面，可以使用被调用函数外部作用域的变量
	例子：
		定义一个委托：delegate void del(); //一般定义在类外部，作为公用的变量。
		定义一个委托变量，并给变量赋值：
			方法一：del d = new del(fun1);//fun1就是一个无参数无返回值的函数
			lambda方式：
				int ij = 1;
				//可以看出，lambda内部是可以调用ij的
				del d = new del(() => { Console.WriteLine(ij); ij = 2; Console.WriteLine(ij); });
		被调用的函数：        
			private void fun1()
	        {
	            int ij = 3;
	            Console.WriteLine(ij);
	        }


表达式目录树：
	--类：Expression
	--生成lambda表达式：Expression.Lambda<Action>(par1,par2)
	--可以自行拼装表达书目录树，动态生成lambda表达式
	--可以用来缓存


数据查询基本操作：
	--筛选：where
	--条件过滤：Select
	--排序：OrderBy
	--倒序：OrderByDescending
	--跳过：Skip
	--提取：Take
	--分组：group x by x.x into newGroup  ???如何使用多个元素分组
	--链接：Join  ???左链接???右链接


Linq to object：
	--where：用于过滤数据
		Enumerable可序列化的基类，里面有where。就是一个自定义条件的查询方法
	--yield
		--结果是一个迭代器
		--延时查询
		--yield return rst;返回结果必须是Enumerable类型
		--如果使用普通获取方式，会一次获取全部结果。
			使用yield可以实现获取中断，用多少查多少。
			这样可以减少内存的使用。
		--可以使用".ToList()"，就会立即获取全部结果
		--例子：
	      	public IEnumerable<int> yieldFun()//返回结果必须是IEnumerable<>接口
	        {
	            int i = 0;
	            while (i<10)
	            {
	                i++;
	                Thread.Sleep(1000);
	                yield return i;
	            }
	        }
	--查询运算符：
		--使用方式1：
			List<int> rList = new List<int> { 1, 2, 6, 9, 56 }.where(i => i > 5);
		--使用方式2：
			var v1 = from a in new List<int> { 1, 2, 6, 9, 56 }
					 where a > 5
					 select a;
	--



泛型查询：(相当于Linq的where)
	--原方法：
		static class ExtendMethod
	    {
	        public static List<T> findWhere<T>(this List<T> list,Func<T,bool> predicate)
	        {
	            List<T> _list = new List<T>();
	            foreach (var item in list)
	            {
	                if (predicate.Invoke(item))
	                {
	                    _list.Add(item);
	                }
	            }
	            return _list;
	        }
	    }
	--调用： 
		List<int> rList = new List<int> { 1, 2, 6, 9, 56 }.findWhere(i => i > 5);


匿名类：
	object obj=new{ID=2} 没办法调用obj的ID属性，应为obj是object类
	dynamic dObj=new{ID=2} 编译器不做检查，在执行的时候才会检查。dynamic相当于一个字典。
	var vObj=new{ID=2} 自动类型识别，编译器给起了一个名字。这是一个语法糖。


扩展方法：
	--静态类的静态方法，一个参数类型前面加this.
	--可以在不修改类的名字和内容时，增加类的功能
	--假如原类有同名的方法，会调用原类的方法。这是一个坑！！！破坏封装性！！！
	--扩展方法不要对基础类型进行扩展，一般针对自定义的类型扩展


加密，解密：
	MD5：
		--云存储，上传检查（急速秒传，计算速度怎么样）
		--文件下载防止篡改
		--git/svn 源代码管理检查
	对称可逆加密：
		--常用算法：Des AES Blowfish
		--加秘钥和解秘钥一样
	非对称可逆：RAS
		--证明我是我：加秘钥为私钥，解秘钥为公钥。可以确保消息来源。
		--只有我能看：加秘钥为公钥，解秘钥为私钥。但是不知要消息来源。
	SSL:
		--CA机构
	Https:
		--所有过程都使用加密
		--单边认证，浏览器认证服务器，防止浏览器被DNS劫持
		--过程：（思考，在任何一个地方被劫持，是否可能存在漏洞）
			client发送请求，server返回一个CA证书。
			客户端先计算CA证书的MD5，然后，通过浏览器内置的解密公钥A，解密证书。获取一个服务器内置的另一个加密公钥B。
			客户端使用加密公钥B，加密一段文字，发送给服务器。
			服务器根据自身的解密私钥C（与加密公钥B一对）解密，并返还结果给客户端。
			客户端验证服务器返回的结果是正确的。
			客户端生成一个对称的秘钥D发送给服务器。
			服务使用对称秘钥D向客户端发送内容，进行通信。
	U盾：
		--双边认证


json:
	保存比xml小，一般用于手机的数据传输。
	出现一个格式出错，即不能解析。
	.NET使用的库一般是：NewtonSoft的json库。这个库比微软自己写的json库速度更快。
		JsonConvert.serializable()

using(){} 关键字
	语句，定义一个范围，在范围结束时处理对象。 
	当在某个代码段中使用了类的实例，而希望无论因为什么原因，只要离开了这个代码段就自动调用这个类实例的Dispose。 
	要达到这样的目的，用try...catch来捕捉异常也是可以的，但用using也很方便


文件夹创建：
	一次性创建所有子路径：Directory.CreateDirectory(filePath)


序列化：
	序列化是将一个对象保存到存储介质上或者将对象进行转换使之能够在网络上传送的行为。
	能对一个类进行序列化的条件是：该类的任何基类可序列化；该类应用了Serializable特性。



线程池ThreadPool：
	启用：ThreadPool.QueueUserWorkItem(Action x);
	信号量：ManualResetEvent
		有两个方法：set,reset

多线程Tread：（默认属于前台线程，在父线程结束后，还会执行完再结束）
	定义方法：
		定义委托函数：TreadStart
		定义线程：Thread
		开始线程：Thread.Strat();
	设置为后台线程：
		Thread.IsBackground=true;
	任务：
		封装一个带回调的线程调用==>可以用一个委托封装两个顺序执行的委托
		封装一个带返回值的多线程调用
		关键代码：
            ///定义了一个泛型函数A，A内部启动一个线程，同时返回一个带有同类型的一个泛型函数B
            ///B是等待A线程完成后才返回一个值
            ///通过invoke B，来激活返回的泛型函数B，并最后得到返回值
            ///因此，在调用A的时候，可以做另外的东西C。但是，把 B.Invoke放在做另外的	
	        Func<T> AFun<T>(Func<T> func)
	        {

	            T t = default(T);
	            ThreadStart start = () =>
	              {
	                  t=func.Invoke();
	              };
	            Thread thread = new Thread(start);
	            thread.Start();

	            return new Func<T>(() =>
	            {
	                thread.Join();
	                return t;
	            });
	        }


获取线程ID：
	Thread.CurrentThread.ManagedThreadId


异步调用：（属于后台线程，在父线程结束后，立刻结束）
	Action<type> name =fun()...Action是只有一个参数，没有返回值的委托
	用BeginInvoke来调用异步函数

	string.ReferenceEquals
	IAsyncResult

	异步调用过程：
		先定义一个委托Delegate，并赋值一个委托的函数FunD
		使用Delegate.BeginInvoke(par,callBackFun,state)调用委托函数FunD
		FunD执行完成之后，会执行回调函数callBackFun
		也可以在Delegate.BeginInvoke，使用异步等待

	异步等待：
		方法一：while(!IAsyncResult.IsCompleted){Thread.Sleep(100);...}
		方法二，最多等待time毫秒后，继续执行：IAsyncResult.AsyncWaitHandle.WaitOne(time);
		方法三，可以获取返回值：action.EndInvoke()


类的继承：
	public和protect元素都可以被子类继承
	private元素不能被子类继承和使用


状态行为模式：statePattern
 	使用上下文context写一个状态行为模式


Attribute使用目标二：validData（在attributeDemo项目）
	定义一个枚举类型描述说明，使用扩展方法获取特性描述（静态类，定义静态方法，参数加this）
	这里使用了多态


Attribute使用目标一：（在attributeDemo项目）
	定义一个权限认证的attribute，带isLogin方法，并使用特性判断isDefined。


Attribute特性：
	定义：
		特性是一个继承Attribute的类，用于给元素做标记，在编译时，生成到meteData中。
		通过反射获取属性定义的信息，并做一些操作。
	[obsolete] ：标记使用的类或方法已经过时，编译时会warming或者error
	[serializable] ：标记可以序列化和反序列化，可以影响程序的运行
	[return : attributeA]: 给返回值增加特性
	[System.AttributeUsage(System.AttributeTargets.All,AllowMultiple = false, Inherited = true)] ：
		用于修饰特性，规定特性能修饰的地方。确定可以如何使用自定义特性类。 AttributeUsage 是一个可
		应用于自定义特性定义，以便控制如何应用新特性的特性。


Attribute的定义：
	--继承Attribute类
	--使用AttributeUsage规定特性
	--使用反射getType，或者typeof获取类型
	--使用GetCustomAttributes获取属性，没有获取单个特性的方法
	--isDefined：判断是否有某个特性
	--method.GetParameters：获取方法的参数
	--type.GetMethods：获取类型的方法
	--type.GetProperties: 获取类型的属性
	--type.GetFeilds：获取类型的字段


object类
	object 类型在 .NET Framework 中是 Object 的别名。 在 C# 的统一类型系统中，所有类型
	（预定义类型、用户定义类型、引用类型和值类型）都是直接或间接从 Object 继承的。 可以
	将任何类型的值赋给 object 类型的变量。 将值类型的变量转换为对象的过程称为“装箱”。 将
	对象类型的变量转换为值类型的过程称为“取消装箱”。 有关更多信息，请参见 装箱和取消装箱。


反射的基本应用：(查看reflectionDemo)
	加载dll：
		Assembly assembly = Assembly.Load("dllName");
	获取类: 
		Type testType = assemly.GetType("Ruanmou.DB.SqlServer.ReflectionTest");
	创建实例：
		object obj=Activator.CreateInstance(testType);
	方法调用：
		获取实例的方法：MethodInfo method = instance.getMethod("methodName");
		调用重载的私有方法：
		泛型方法需要使用：makeGenericMethods
	获取属性和字段：
		获取属性：type.GetProperties()
		获取静态属性：


框架定义：
	尽量不在框架代码里面new对象，把new实际对象的工作放到实际逻辑里面做


foreach的使用：
	foreach 语句针对实现 IEnumerable 或 IEnumerable<T> 接口的数组或集合中的每个元素重复一组嵌入语句。 foreach 语句
	用于循环访问集合以获取所需信息，但不用于添加或删除源集合中的项，以避免不可预知的副作用。 如果需要添加或删除源集合中
	的项，请使用 for 循环。 为数组或集合中的每个元素继续执行嵌入的语句。 为集合中的所有元素完成迭代后，控制将传递给 foreach 
	块之后的下一语句。 在 foreach 块中的任何点上，可以使用中断关键字中断该循环，或者可以使用继续关键字单步执行到循环中的下一
	次迭代。foreach 循环还可以通过 goto、return 或 throw 语句退出。 


继承：
	子类继承了父类的所有公开方法和属性


装箱和拆箱
	装箱：在函数调用时，如果参数类型和传入的类型不一样，首先在栈中获取类型，并且在堆中外包一层并生成一个引用类型的类型。
	拆箱：把堆中生成的引用类型
	装箱和拆箱都是在C#用对object的转换操作。


系统计时：
	using System.Diagnostics
	Stopwatch stopwatch = new Stopwatch();
	stopwatch.Start();
	...
	stopwatch.Stop();
	System.Console.WriteLine("{0}",stopwatch.ElapsedMilliseconds);


泛型约束：
	基类：where T:baseClass
	接口: where T:interface
	引用类型约束：where T：class //就是这个关键字
	值类型约束：where T: struct //就是这个关键字
	无参数构造函数约束： where T:new()

	多重约束：where baseClass,itf //两个约束是and的关系


泛型缓存：
	提高性能，比用dictionary快。dic存在堆中，而缓存一般存在栈中


	

